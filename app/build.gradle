import javax.inject.Inject

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.adarshr.test-logger'
    id 'kotlin-parcelize'
}

android {
    compileSdkVersion 31
    buildToolsVersion '30.0.3'

    signingConfigs {
        staging {
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("src/keystore/debug.keystore")
        }
        release {
            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
            storeFile file(System.getProperty("user.home") + "/keystores/keystore.jks")
            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
        }
    }

    lintOptions {
        lintConfig rootProject.file('gradle/lint.xml')
        abortOnError true
        warningsAsErrors true
        disable "NullSafeMutableLiveData"
        ignore "QueryPermissionsNeeded"
    }

    defaultConfig {
        applicationId "com.sohohouse.seven"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 145
        versionName version_name
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        renderscriptTargetApi 21
        renderscriptSupportModeEnabled true
    }

    buildTypes {

        //build meant for developers pointing to dev endpoints, proguard is disabled
        debug {
            debuggable true
            minifyEnabled false
            versionNameSuffix "-dev"
            applicationIdSuffix ".staging"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.staging

            FirebasePerformance {
                // Disable @AddTrace annotation processing and automatic HTTP/S network request monitoring
                // for a debug build variant at compile time, which reduces build time significantly
                instrumentationEnabled false
            }

            ext.enableCrashlytics = false
            //Disabling Crashlytics in debug builds to decrease build time

            tasks.register('updateVenuesDebug', UpdateVenues, projectDir, 'https://api.staging.sohohousedigital.com/')
        }
        // build meant for QA pointing to dev endpoints, proguard is enabled
        qa {
            debuggable true
            minifyEnabled true
            shrinkResources true
            versionNameSuffix "-qa"
            applicationIdSuffix ".staging"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.staging


            tasks.register('updateVenuesQa', UpdateVenues, projectDir, 'https://api.staging.sohohousedigital.com/')
        }

        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release


            tasks.register('updateVenuesProduction', UpdateVenues, projectDir, 'https://api.production.sohohousedigital.com/')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs = ['-Xinline-classes']
    }

    buildFeatures {
        viewBinding true
    }

    sourceSets {
        qa {
            setRoot 'src/debug'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.name == "qa") {
                def lintTask = tasks["lint${variant.name.capitalize()}"]
                output.assemble.dependsOn lintTask
                output.assemble.dependsOn postToRaygunQA
            }
            if (variant.name == "release") {
                output.assemble.dependsOn postToRaygunRelease
            }
        }
    }

    task postToRaygunQA {
        doLast {
            def process = ["curl", "-v", "-F", "file=@$project.rootDir/app/build/outputs/mapping/qa/mapping.txt", "-F", "version=$android.defaultConfig.versionName-qa", "-F", "overwrite=true", "https://app.raygun.com/upload/proguardsymbols/1ffgyly?authToken=hbel0tAAV0Lbfz0MBRHZ1T3iT0z5sBIi"].execute()
        }
    }

    task postToRaygunRelease {
        doLast {
            def process = ["curl", "-v", "-F", "file=@$project.rootDir/app/build/outputs/mapping/release/mapping.txt", "-F", "version=$android.defaultConfig.versionName", "-F", "overwrite=true", "https://app.raygun.com/upload/proguardsymbols/1ffgxts?authToken=hbel0tAAV0Lbfz0MBRHZ1T3iT0z5sBIi"].execute()
        }
    }

    testOptions {
        unitTests.includeAndroidResources true
        // Fix for java.lang.RuntimeException: Method putString in android.os.BaseBundle not mocked
        unitTests.returnDefaultValues true
    }

    packagingOptions {
        exclude 'META-INF/proguard/coroutines.pro'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(':network')
    implementation project(':sohosendbird')

    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.appcompat:appcompat:1.4.1"

    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.github.Android-library-copy-dependencies:SwipeRevealLayout:1.5.2'

    implementation "androidx.navigation:navigation-fragment-ktx:$jetpack_navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$jetpack_navigation_version"

    def lifecycle_version = "2.4.0"
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.activity:activity-ktx:1.2.2"
    implementation ("androidx.fragment:fragment-ktx:1.3.6") {
        force(true)
    }

    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    implementation "androidx.paging:paging-runtime-ktx:2.1.2"

    //Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"

    // moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"

    //moshi-json api
    implementation "moe.banana:moshi-jsonapi:$moshi_jsonapi_version"

    //Image Crop
    implementation "com.github.CanHub:Android-Image-Cropper:$android_image_cropper_version"


    //dagger 2
    //https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    //rxjava
    implementation "io.reactivex.rxjava2:rxjava:$rx_java_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"

    implementation 'com.jakewharton.rxbinding4:rxbinding:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-appcompat:4.0.0'


    //secure prefs
    //https://github.com/iamMehedi/Secured-Preference-Store
    //noinspection GradleDependency
    implementation "online.devliving:securedpreferencestore:$secured_preference_store_version"

    //Encryption
    //https://github.com/bcgit/bc-java
    implementation "org.bouncycastle:bcpg-jdk15on:$bouncy_castle_pg_version"

    //Dependencies for local unit tests
    testImplementation "androidx.test:runner:$android_test_version"
    testImplementation "com.google.truth:truth:$google_truth_version"
    testImplementation "com.android.support.test.espresso:espresso-idling-resource:3.2.0"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation("com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_version") {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }

    // Android Testing Support Library's runner and rules
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    // Espresso UI Testing dependencies.
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.3.0"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //SendBird
    implementation "com.sendbird.sdk:sendbird-android-sdk:3.1.5"

    // Firebase Performance Monitoring
    implementation("com.google.firebase:firebase-perf:17.0.0") {
        exclude group: "com.google.firebase", module: "firebase-iid"
        //conflicts with marketingcloud dependencies
    }

    // EventAnalytics
    implementation "com.google.firebase:firebase-core:17.5.0"
    implementation 'com.google.firebase:firebase-analytics-ktx:17.5.0'

    // Crashlytics
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'

    // FCM
    implementation platform('com.google.firebase:firebase-bom:27.0.0')
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Firebase remote config
    implementation 'com.google.firebase:firebase-config-ktx'

    // salesforce marketingcloud
    implementation "com.salesforce.marketingcloud:marketingcloudsdk:7.2.0"

    // HTML link parsing util
    implementation "me.saket:better-link-movement-method:2.2.0"

    // Raygun Crash reporting software used by soho
    implementation("com.raygun:raygun4android:4.0.1")

    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:11.0.1'

    implementation project(':AuthenticationService-1.1.72')
    implementation "org.threeten:threetenbp:1.4.4"
    implementation "io.gsonfire:gson-fire:1.8.4"

    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation("io.mockk:mockk:$mockk_version") { exclude module: 'objenesis' }

    // Add dependency
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    // stick with an old version before migrating androidx
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation "com.journeyapps:zxing-android-embedded:$zxing_qr_generator_version"

    implementation 'com.github.Dimezis:BlurView:version-1.6.6'

    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation 'joda-time:joda-time:2.10.6'

    // Exoplayer 2
    implementation 'com.google.android.exoplayer:exoplayer:2.16.1'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.16.1'

    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.7'
    implementation 'org.jetbrains:annotations:16.0.2'

    implementation 'com.github.kirich1409:viewbindingpropertydelegate-noreflection:1.5.6'
    implementation 'com.github.MikeOrtiz:TouchImageView:3.1.1'

    // UXCam
    implementation 'com.uxcam:uxcam:3.4.0@aar'

}

afterEvaluate {
    mergeDebugAssets.dependsOn updateVenuesDebug
    mergeQaAssets.dependsOn updateVenuesQa
    mergeReleaseAssets.dependsOn updateVenuesProduction
}

class UpdateVenues extends DefaultTask {

    @Internal
    File parentDir
    @Internal
    String baseUrl

    @Inject
    UpdateVenues(final File parentDir, String baseUrl) {
        this.parentDir = parentDir
        this.baseUrl = baseUrl
        outputs.upToDateWhen { false }
    }

    @TaskAction
    void update() {
        def req = new URL("${getBaseUrl()}venues/venues?include=house,restaurant,hotel&filter[is_top_level]=false").openConnection()
        req.setRequestProperty("Accept", " ")
        File assetsFile = new File(parentDir, "src/main/assets")
        if (!assetsFile.exists()) assetsFile.mkdir()
        File targetFile = new File(assetsFile, "venues.json")
        OutputStream outStream = new FileOutputStream(targetFile)
        try {
            outStream.write(req.inputStream.bytes)
        } catch (IOException ex) {
            print(ex)
        } finally {
            outStream.close()
        }
    }

}