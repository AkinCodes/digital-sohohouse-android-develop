package com.sohohouse.seven.connect.trafficlights.leaveimport androidx.lifecycle.viewModelScopeimport com.sohohouse.seven.base.mvvm.BaseViewModelimport com.sohohouse.seven.common.analytics.AnalyticsManagerimport com.sohohouse.seven.common.prefs.LocalVenueProviderimport com.sohohouse.seven.connect.trafficlights.repo.TrafficLightsRepoimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.flow.flowOnimport kotlinx.coroutines.launchimport javax.inject.Injectclass LeaveVenueViewModel @Inject constructor(    analyticsManager: AnalyticsManager,    private val trafficLightsRepo: TrafficLightsRepo,    private val localVenueProvider: LocalVenueProvider) : BaseViewModel(analyticsManager) {    init {        analyticsManager.logEventAction(AnalyticsManager.Action.TrafficLightsLeaveVenue)    }    private val _dismiss = MutableStateFlow(false)    val dismiss: StateFlow<Boolean> = _dismiss    val title = flow {        emit(localVenueProvider.localVenue.value?.name ?: "")    }.flowOn(viewModelContext)    fun confirm() {        viewModelScope.launch(viewModelContext) {            analyticsManager.logEventAction(AnalyticsManager.Action.TrafficLightsLeaveVenueConfirm)            trafficLightsRepo.clearStatus().ifValue {                _dismiss.value = true            }        }    }}